See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 4 warnings)
API:          PASSED

Findbugs:     PASSED
Checkstyle:   FAILED (42 warnings)

Correctness:  15/43 tests passed
Memory:       49/53 tests passed
Timing:       79/110 tests passed

Aggregate score: 49.54%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.2K Feb  7 04:22 Deque.java
1.3K Feb  7 04:22 Permutation.java
1.7K Feb  7 04:22 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:14: warning: [unchecked] unchecked cast
        a = (Item[]) new Object[2];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:19: warning: [unchecked] unchecked cast
        Item[] temp = (Item[]) new Object[capacity];
                               ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings

% javac Permutation.java
*-----------------------------------------------------------
Permutation.java:17: warning: [rawtypes] found raw type: RandomizedQueue
        RandomizedQueue rand = new RandomizedQueue<>();
        ^
  missing type arguments for generic class RandomizedQueue<Item>
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
Permutation.java:20: warning: [unchecked] unchecked call to enqueue(Item) as a member of the raw type RandomizedQueue
            rand.enqueue(StdIn.readString());
                        ^
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Deque.java:16:19: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:20:29: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:21:22: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:23:36: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:31:25: '(' is preceded with whitespace. [MethodParamPad]
Deque.java:31:36: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:32:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:32:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:38:18: 'while' is not followed by whitespace. [WhitespaceAfter]
Deque.java:38:37: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:47:30: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:48:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:48:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:59:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:59:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:65:38: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:78:37: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:84:33: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:85:29: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:87:27: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:88:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:88:27: '{' is not preceded with whitespace. [WhitespaceAround]
RandomizedQueue.java:20:12: 'for' is not followed by whitespace. [WhitespaceAfter]
RandomizedQueue.java:20:35: '{' is not preceded with whitespace. [WhitespaceAround]
RandomizedQueue.java:60:16: The instance (or static) variable 'randomized' must be private. [VisibilityModifier]
RandomizedQueue.java:66:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Permutation.java:2:3: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Permutation.java:3:3: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Permutation.java:4:3: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Permutation.java:5:3: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Permutation.java:6:3: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Permutation.java:7: Do not use .* in import statements. [AvoidStarImport]
Permutation.java:14:43: '{' is not preceded with whitespace. [WhitespaceAround]
Permutation.java:19:41: '{' is not preceded with whitespace. [WhitespaceAround]
Permutation.java:23:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Permutation.java:38:3: The comment is empty. [IllegalTokenText]
Permutation.java:46:3: The comment is empty. [IllegalTokenText]
Permutation.java:47:3: The comment is empty. [IllegalTokenText]
Permutation.java:49:3: The comment is empty. [IllegalTokenText]
...
 Checkstyle ends with 42 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.isEmpty()

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.isEmpty()

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.isEmpty()

==> FAILED

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.addLast(0)
         deque.removeLast()      ==> 0
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.addLast(4)
         deque.removeLast()      ==> 4
         deque.isEmpty()

  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.isEmpty()

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of dequeue operations was:
         deque.addLast(0)
         deque.isEmpty()
         deque.removeLast()      ==> 0
         deque.isEmpty()

==> FAILED

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 5 of 50
    - student   removeFirst() returned 0
    - reference removeFirst() returned 4
    - sequence of dequeue operations was:
         deque.addLast(0)
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.removeLast()      ==> 0
         deque.addLast(4)
         deque.removeFirst()     ==> 0

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 15 of 500
    - student   removeLast() returned 9
    - reference removeLast() returned 11

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

==> FAILED

Test 7: Removing from an empty deque
  * removeFirst()
     java.util.NoSuchElementException not thrown
  * removeLast()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==> passed

Test 11: Create two nested iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
    - java.lang.NullPointerException not thrown for addFirst(null)
    - java.lang.NullPointerException not thrown for addLast(null)
==> FAILED

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 11/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 15 of 50
    - sample() returned null

  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 2 of 500
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(76)
         rq.enqueue(65)
         rq.sample()      ==> null

  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
    - failed on operation 2 of 1000
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(384)
         rq.enqueue(469)
         rq.sample()      ==> null

  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    - failed on operation 1 of 5
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(0)
         rq.sample()      ==> null

  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    - failed on operation 2 of 50
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(37)
         rq.enqueue(42)
         rq.sample()      ==> null

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    - failed on operation 1 of 500
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(315)
         rq.sample()      ==> null

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
    - failed on operation 1 of 1000
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(74)
         rq.sample()      ==> null

==> FAILED

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 33 of 50
    - sample() returned null

  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 2 of 500
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(224)
         rq.enqueue(91)
         rq.sample()      ==> null

  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 9 of 1000
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(859)
         rq.enqueue(549)
         rq.enqueue(213)
         rq.enqueue(889)
         rq.enqueue(475)
         rq.enqueue(401)
         rq.enqueue(421)
         rq.enqueue(772)
         rq.dequeue()     ==> 475
         rq.sample()      ==> null

  *    5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
    - failed on operation 7 of 50
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.isEmpty()     ==> true
         rq.isEmpty()     ==> true
         rq.enqueue(5)
         rq.size()        ==> 1
         rq.size()        ==> 1
         rq.sample()      ==> null

  *  500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
    - failed on operation 1 of 500
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.enqueue(304)
         rq.sample()      ==> null

  * 1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
    - failed on operation 4 of 1000
    - sample() returned null
    - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.isEmpty()     ==> true
         rq.enqueue(505)
         rq.sample()      ==> null

==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
     java.util.NoSuchElementException not thrown
  * sample()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 6: create multiple randomized queue objects at the same time
==> passed

Test 7: check that iterator() returns correct items after a sequence of
        enqueue() operations
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    UtilCOS.compareAsMultisets(UtilCOS.java:493)
    TestRandomizedQueue.test7(TestRandomizedQueue.java:368)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1020)

==> FAILED

Test 8: check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:409)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1021)

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:443)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:515)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1022)

  * n = 1000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:443)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:516)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1022)

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false
  * n = 1000
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false
==> FAILED

Test 11: create two iterators over different randomized queues
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    UtilCOS.compareAsMultisets(UtilCOS.java:493)
    TestRandomizedQueue.test11(TestRandomizedQueue.java:627)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1024)

==> FAILED

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
    java.lang.IllegalArgumentException: called get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:687)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:880)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1026)

  * n = 5, trials = 12000
    java.lang.IllegalArgumentException: called get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:687)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:881)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1026)

  * n = 8, trials = 12000
    java.lang.IllegalArgumentException: called get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:687)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:882)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1026)

  * n = 10, trials = 12000
    java.lang.IllegalArgumentException: called get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:687)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:883)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1026)

==> FAILED

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC         0    2000.0          0.00
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB      5980    2000.0      13099.47
              CBA      6020    2000.0      13267.36
        -------------------------------------------
                      12000   12000.0      26366.83

    G-statistic = 26366.83 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000
  * n = 5, trials = 12000

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:826)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:904)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1028)

  * n = 3, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:826)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:905)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1028)

  * n = 4, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:826)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:906)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1028)

  * n = 5, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:67)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:826)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:907)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1028)

==> FAILED

Test 16: check that NullPointerException is thrown when inserting null items
    - java.lang.NullPointerException not thrown for enqueue(null)
==> FAILED

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - java.util.NoSuchElementException not thrown for next()
==> FAILED

Test 18: check iterator() when RandomizedQueue is empty
    - hasNext() returns true
==> FAILED


Total: 4/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt


WARNING: the time limit of 60 seconds was exceeded, so not all tests could be completed.


Total: 0/9 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1

Total: 0/2 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          352
=> passed       64         2592
=> passed      256        10272
=> passed     1024        40992
=> passed     4096       163872
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 40.00 n + 32.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           72
=> passed       64           72
=> passed      256           72
=> passed     1024           72
=> passed     4096           72
==> 5/5 tests passed

Memory after adding n = 2^i items: 72.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32
=> passed       64           32
=> passed      256           32
=> passed     1024           32
=> passed     4096           32
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 6 of 100
    - sequence of operations:
         deque.addFirst("LSKVKCOFMO")
         deque.add

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.