See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 4 warnings)
API:          PASSED

Findbugs:     PASSED
Checkstyle:   FAILED (31 warnings)

Correctness:  31/43 tests passed
Memory:       52/53 tests passed
Timing:       91/110 tests passed

Aggregate score: 74.61%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Feb  7 21:44 Deque.java
 467 Feb  7 21:44 Permutation.java
2.0K Feb  7 21:44 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:14: warning: [unchecked] unchecked cast
        a = (Item[]) new Object[2];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:19: warning: [unchecked] unchecked cast
        Item[] temp = (Item[]) new Object[capacity];
                               ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings

% javac Permutation.java
*-----------------------------------------------------------
Permutation.java:11: warning: [rawtypes] found raw type: RandomizedQueue
        RandomizedQueue rand = new RandomizedQueue<>();
        ^
  missing type arguments for generic class RandomizedQueue<Item>
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
Permutation.java:14: warning: [unchecked] unchecked call to enqueue(Item) as a member of the raw type RandomizedQueue
            rand.enqueue(StdIn.readString());
                        ^
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Deque.java:16:19: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:23:29: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:24:22: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:26:36: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:36:25: '(' is preceded with whitespace. [MethodParamPad]
Deque.java:36:36: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:39:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:39:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:45:18: 'while' is not followed by whitespace. [WhitespaceAfter]
Deque.java:45:37: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:54:30: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:55:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:55:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:66:11: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:66:25: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:72:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:72:34: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:76:38: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:89:37: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:95:33: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:96:29: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:98:27: '{' is not preceded with whitespace. [WhitespaceAround]
Deque.java:99:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:99:27: '{' is not preceded with whitespace. [WhitespaceAround]
RandomizedQueue.java:20:12: 'for' is not followed by whitespace. [WhitespaceAfter]
RandomizedQueue.java:20:35: '{' is not preceded with whitespace. [WhitespaceAround]
RandomizedQueue.java:72:16: The instance (or static) variable 'randomized' must be private. [VisibilityModifier]
Permutation.java:1: Do not use .* in import statements. [AvoidStarImport]
Permutation.java:8:43: '{' is not preceded with whitespace. [WhitespaceAround]
Permutation.java:13:41: '{' is not preceded with whitespace. [WhitespaceAround]
Permutation.java:17:14: 'while' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 31 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==> passed

Test 7: Removing from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==> passed

Test 11: Create two nested iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 16/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
==> passed

Test 7: check that iterator() returns correct items after a sequence of
        enqueue() operations
==> passed

Test 8: check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
  * n = 1000
==> passed

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
  * n = 1000
==> passed

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A         0    4000.0          0.00
                B         0    4000.0          0.00
                C     12000    4000.0      26366.69
        -------------------------------------------
                      12000   12000.0      26366.69

    G-statistic = 26366.69 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A         0    2400.0          0.00
                B         0    2400.0          0.00
                C         0    2400.0          0.00
                D         0    2400.0          0.00
                E     12000    2400.0      38626.51
        -------------------------------------------
                      12000   12000.0      38626.51

    G-statistic = 38626.51 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 8, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A         0    1500.0          0.00
                B         0    1500.0          0.00
                C         0    1500.0          0.00
                D         0    1500.0          0.00
                E     12000    1500.0      49906.60
                F         0    1500.0          0.00
                G         0    1500.0          0.00
                H         0    1500.0          0.00
        -------------------------------------------
                      12000   12000.0      49906.60

    G-statistic = 49906.60 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 10, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A         0    1200.0          0.00
                B         0    1200.0          0.00
                C         0    1200.0          0.00
                D         0    1200.0          0.00
                E         0    1200.0          0.00
                F         0    1200.0          0.00
                G         0    1200.0          0.00
                H         0    1200.0          0.00
                I         0    1200.0          0.00
                J     12000    1200.0      55262.04
        -------------------------------------------
                      12000   12000.0      55262.04

    G-statistic = 55262.04 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

==> FAILED

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC         0    2000.0          0.00
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB      5902    2000.0      12773.63
              CBA      6098    2000.0      13596.27
        -------------------------------------------
                      12000   12000.0      26369.90

    G-statistic = 26369.90 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000
  * n = 5, trials = 12000

==> FAILED

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 16: check that NullPointerException is thrown when inserting null items
    - java.lang.NullPointerException not thrown for enqueue(null)
==> FAILED

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: check iterator() when RandomizedQueue is empty
==> passed


Total: 15/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt


WARNING: the time limit of 60 seconds was exceeded, so not all tests could be completed.


Total: 0/9 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1

Total: 0/2 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          352
=> passed       64         2592
=> passed      256        10272
=> passed     1024        40992
=> passed     4096       163872
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 40.00 n + 32.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          392
=> passed       64         2632
=> passed      256        10312
=> passed     1024        41032
=> passed     4096       163912
==> 5/5 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           72
=> passed       64           72
=> passed      256           72
=> passed     1024           72
=> passed     4096           72
==> 5/5 tests passed

Memory after adding n = 2^i items: 72.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32
=> passed       64           32
=> passed      256           32
=> passed     1024           32
=> passed     4096           32
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
==> passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
==> passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed

Test 8 (bonus): Uses at most 40n + 40 bytes of memory
==> passed

Total: 29/28 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for
a randomized queue containing n items is 48n + 192.

Running 23 total tests.

Test 1a-1d: Total memory usage after inserting n integers.

                 n        bytes
----------------------------------------------------------
=> passed       64         1080
=> passed      256         4152
=> passed     1024        16440
=> passed     4096        65592
==> 4/4 tests passed


Memory: 16.00 n + 56.00   (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting n+1 items.

                 n        bytes
----------------------------------------------------------
=> passed       64         1080
=> passed      256         4152
=> passed     1024        16440
=> passed     4096        65592
==> 4/4 tests passed


Memory: 16.00 n + 40.00   (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2n+1 items, and
            then deleting n items.

                 n        bytes
----------------------------------------------------------
=> passed       64         1080
=> passed      256         4152
=> passed     1024        16440
=> passed     4096        65592
==> 4/4 tests passed


Memory: 16.00 n + 40.00   (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting n items, and
            then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       64           72
=> passed      256           72
=> passed     1024           72
=> passed     4096           72
==> 4/4 tests passed


Memory: 72.00   (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       64           40
=> passed      256           40
=> passed     1024           40
=> passed     4096           40
==> 4/4 tests passed


Memory: 40.00   (R^2 = 1.000)



Test 6a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 7: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Total: 23/23 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 55 total tests.

Test 1a-1g:  n random calls to addFirst(), removeFirst(), isEmpty(), and size()
             with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.03
=> passed     1024000     0.06
=> passed     2048000     0.13
==> 12/12 tests passed


Test 2a-2g:  n random calls to addFirst(), removeFirst(), isEmpty(), and size(),
             with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.04
=> passed       16384     0.17
=> FAILED       32768     0.67
   [ Most likely one of your operations is not constant time. ]
==> 5/12 tests passed


Test 3a-3g:  n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
             isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.02
=> passed       16384     0.09
=> passed       32768     0.39
=> FAILED       65536     1.69
   [ Most likely one of your operations is not constant time. ]
==> 6/12 tests passed


Test 4a-4g:  Create deque of n objects, then iterate over the n objects
             by calling next() and hasNext().

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.01
=> passed     2048000     0.02
==> 12/12 tests passed


Test 5a-5g:  Create deque of n objects, then interleave n calls each to
             removeFirst()/removeLast() and addFirst()/addLast().

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.02
=> passed        4097     0.07
=> FAILED       16385     1.29
   [ Most likely one of your operations is not constant time. ]
==> 3/7 tests passed

Total: 38/55 tests passed!

================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 55 total tests.

Test 1a-1g:  n random calls to enqueue(), sample(), dequeue(), isEmpty(),
             and size() with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.05
=> passed     2048000     0.10
==> 12/12 tests passed


Test 2a-2g:  n random calls to enqueue(), sample(), dequeue(), isEmpty(),
             and size() with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> pas

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.